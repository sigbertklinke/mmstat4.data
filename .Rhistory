stopifnot(is.data.frame(x))
nx <- length(x)
df <- data.frame(plot=1:nx,
sort=1:nx,
unique=sapply(x, function(v) {length(unique(v))}),
decreasing=rep(FALSE, nx),
na.last=rep(TRUE, nx),
is.numeric=sapply(x, is.numeric),
non.finite=sapply(x, function(v), { paste0(unique(v[!finite(v)]), collapse=",") }),
tpCtrl <- function(x) {
stopifnot(is.data.frame(x))
nx <- length(x)
df <- data.frame(plot=1:nx,
sort=1:nx,
unique=sapply(x, function(v) {length(unique(v))}),
decreasing=rep(FALSE, nx),
na.last=rep(TRUE, nx),
is.numeric=sapply(x, is.numeric),
non.finite=sapply(x, function(v) { paste0(unique(v[!finite(v)]), collapse=",") }),
min=sapply(x, function(v) { if (is.numeric(v)) min(v, na.rm=TRUE) else NA}),
q25=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.25, na.rm=TRUE) else NA}),
q50=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.5,na.rm=TRUE) else NA}),
q75=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.75,na.rm=TRUE) else NA}),
max=sapply(x, function(v) { if (is.numeric(v)) max(v, na.rm=TRUE) else NA}),
box.col=rep("lightblue", nx),
box.lower=rep(NA, nx),
box.line=rep(NA, nx),
box.upper=rep(NA, nx),
na.col=rep(NA, nx),
color="rainbow",
)
rownames(df) <- names(x)
structure(df, class=c(class(df), "tpCtrl"))
}
tpCtrl(iris)
tpCtrl <- function(x) {
stopifnot(is.data.frame(x))
nx <- length(x)
df <- data.frame(plot=1:nx,
sort=1:nx,
unique=sapply(x, function(v) {length(unique(v))}),
decreasing=rep(FALSE, nx),
na.last=rep(TRUE, nx),
is.numeric=sapply(x, is.numeric),
non.finite=sapply(x, function(v) { paste0(unique(v[!is.finite(v)]), collapse=",") }),
min=sapply(x, function(v) { if (is.numeric(v)) min(v, na.rm=TRUE) else NA}),
q25=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.25, na.rm=TRUE) else NA}),
q50=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.5,na.rm=TRUE) else NA}),
q75=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.75,na.rm=TRUE) else NA}),
max=sapply(x, function(v) { if (is.numeric(v)) max(v, na.rm=TRUE) else NA}),
box.col=rep("lightblue", nx),
box.lower=rep(NA, nx),
box.line=rep(NA, nx),
box.upper=rep(NA, nx),
na.col=rep(NA, nx),
color="rainbow",
)
rownames(df) <- names(x)
structure(df, class=c(class(df), "tpCtrl"))
}
tpCtrl(iris)
tpCtrl <- function(x) {
stopifnot(is.data.frame(x))
nx <- length(x)
df <- data.frame(plot=1:nx,
sort=1:nx,
unique=sapply(x, function(v) { length(unique(v)) }),
decreasing=rep(FALSE, nx),
na.last=rep(TRUE, nx),
is.numeric=sapply(x, is.numeric),
non.finite=sapply(x, function(v) { paste0(unique(v[!is.finite(v)]), collapse=",") }),
min=sapply(x, function(v) { if (is.numeric(v)) min(v, na.rm=TRUE) else NA}),
q25=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.25, na.rm=TRUE) else NA}),
q50=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.5,na.rm=TRUE) else NA}),
q75=sapply(x, function(v) { if (is.numeric(v)) quantile(v, 0.75,na.rm=TRUE) else NA}),
max=sapply(x, function(v) { if (is.numeric(v)) max(v, na.rm=TRUE) else NA}),
box.col=rep("lightblue", nx),
box.lower=rep(NA, nx),
box.line=rep(NA, nx),
box.upper=rep(NA, nx),
na.col=rep(NA, nx),
color="rainbow",
)
rownames(df) <- names(x)
structure(df, class=c(class(df), "tpCtrl"))
}
tpCtrl(iris)
# Creating a sample data frame
data <- data.frame(
x = c(1, 2, 3, NA, 5),
y = c(6, NA, 8, 9, 10)
)
# Applying a custom function to calculate length and minimum value for each column
result <- sapply(data, function(v) c(len = sum(!is.na(v)), min = min(v, na.rm = TRUE)))
# Converting the result to a data frame
result_df <- as.data.frame(t(result))
# Displaying the result
print(result_df)
#' sortbin
#'
#' Sorts and bins the rows of the data frame \code{x} according the sorting columns in \code{sortCol}.
#' \code{decreasing} and \code{na.last} are recycled is necessary. If \code{equibin} is \code{TRUE}
#' and \code{nBins==NA} then \code{nBins} is set to \code{100}.  If \code{equibin} is \code{FALSE}
#' and \code{nBins==NA} then the bins are returned as they come from sorting; only identical values are
#' in one bin. If \code{nBins} is positive then the bins are merged until \code{nBins} reached.
#' Note that the numbers of observations per bin may vary.
#'
#' @param x data frame
#' @param sortCol numeric/character: names or indices of variable used for sorting (default: \code{1})
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{FALSE})
#' @param na.last logical: for controlling the treatment of NAs (default: \code{TRUE})
#' @param nBins integer: maximal number of bins (default: \code{NA}).
#' @param equibin logical: should the number of observations equal per bin (default: \code{TRUE})
#'
#' @return (non-sequential) bin numbers as integer
#' @export
#'
#' @examples
#' data("Boston", package="MASS")
#' tableplot(Boston, bin=sortbin(Boston))
#  tableplot(Boston, bin=sortbin(Boston, sortCol='chas'))
#  tableplot(Boston, bin=sortbin(Boston, sortCol=c('chas', 'rad"), equibin=FALSE)
sortbin <- function(x, sortCol=1, decreasing=FALSE, na.last=TRUE, nBins=NA, equibin=TRUE) {
order1 <- function(x, decreasing=FALSE, na.last=TRUE) {
fx <- as.integer(factor(x))
mx <- max(fx, na.rm=TRUE)
if (decreasing) fx <- mx-fx+1
fx[is.na(fx)] <- if (na.last) mx+1L else 0L
fx
}
#
x <- as.data.frame(x)
n <- nrow(x)
if (any(is.na(decreasing))) stop("`decreasing=NA` is not allowed")
if (any(is.na(na.last))) stop("`na.last=NA` is not allowed")
if (is.null(sortCol)) sortCol <- 1:ncol(x)
sortCol <- if (is.numeric(sortCol)) intersect(sortCol, 1:ncol(x)) else intersect(sortCol, names(x))
# find an order
if (length(sortCol)) {
na.last     <- rep_len(as.logical(na.last), length(sortCol))
decreasing  <- rep_len(as.logical(decreasing), length(sortCol))
args <- list()
for (i in seq_along(sortCol)) args[[i]] <- order1(x[[sortCol[i]]], decreasing[i], na.last[i])
index <- do.call(base::order, args)
} else {
index <- 1:n
}
# create bins
nBins <- as.integer(nBins)
if (is.na(nBins)) nBins <- 100
bin <- rep(NA_integer_, n)
browser()
if (equibin) {
bin[index] <- findInterval(1:n, seq.int(1, n, length.out = nBins+1), all.inside = TRUE)
} else {
sx    <- apply(matrix(unlist(x[,sortCol]), ncol=length(sortCol)), 1, paste0, collapse=",")
pos   <- cumsum(c(1, sx[index[2:n]]!=sx[index[-n]]))
hc    <- hclust(dist(pos), method = "ward.D")
bin[index] <- cutree(hc, min(nBins, max(pos)))
}
#
#  rownames(x) <- 1:nrow(x)
#  x   <- x[index,sortCol,drop=FALSE]
#  sx  <- apply(x, 1, toString)
#  if (equibin) { # standard tableplot
#    if (is.na(nBins)) nBins <- 100
#    nBins <- min(nBins, length(sx))
#    bin <- floor(seq(1, nBins+1, length.out=1+length(sx)))[1:length(sx)]
#  } else {
#    bin <- match(sx, unique(sx))
#    if (!is.na(nBins)) {
#      if (max(bin)>nBins) {
#        repeat {
#          tab  <- c('0'=nrow(x), table(bin))
#          ntab <- length(tab)
#          if ((ntab-1)<=nBins) break
#          merger   <- cbind(tab[1:(ntab-1)]+tab[-1], 1:(ntab-1), 2:ntab)
#          ind      <- which(merger[,1]==min(merger[,1]))
#          if (length(ind)>1) ind <- sample(ind, 1)
#          bin[bin==as.integer(names(tab)[merger[ind,2]])] <- as.integer(names(tab)[merger[ind,3]])
#        }
#      }
#    }
#  }
#  bin[as.integer(row.names(x))] <- bin
as.integer(bin)
}
#' tableplot
#'
#' A tableplot is a visualisation of multivariate data sets. Each column represents a variable
#' and each row bin is an aggregate of a certain number of records. For numeric variables, a value box is
#' plotted with minimum, mean (black line) and maximum value. If any missing values in a bin of
#' a numeric variable appear the box left from the value box is plotted in gray.
#' For categorical variables, a stacked bar chart is depicted of the proportions of categories.
#' Missing values are taken into account.
#'
#' The idea and some code of the tableplot is taken from \href{https://github.com/mtennekes/tabplot}{`tabplot` package}
#' by Martijn Tennekes and Edwin de Jonge.
#' It differs from their package by
#'
#' * multicolumn sorting is possible, and
#' * no support for 'ff' (out of memory vectors).
#'
#' @param x data frame
#' @param select numeric/character: variable to show in the plot (default: `NULL`)
#' @param subset numeric: index of observations to show
#' @param bin integer: bin numbers to which a observations belongs (default: `NULL` = all)
#' @param yj numeric: Yeo Johnson coefficient (default: `NA`). If `NA` then it will be set to 0 (=log) or 1 (=identity)
#' @param IQR_bias numeric: parameter that determines when a logarithmic scale is used when \code{yj} is set to `NA`. The argument IQR_bias is multiplied by the interquartile range as a test.
#' @param colpal color palette to draw (default: `rainbow`)
#' @param color.NA_num color for missing of infinity values for numeric variables (default: `gray75`)
#' @param color.NA color for missing values for categorical variables (default: `grey75`)
#' @param color.num color for lower box for numeric variables (default: `lightblue`)
#' @param color.box color for upper box for numeric variables (default: `deepskyblue`)
#' @param color.line color for line in upper box for numeric variables  (default: `black`)
#' @param box.lower function: determine lower border in upper box for numeric variables (default: `NULL`). If `NULL` then `min(.,na.rm=TRUE)` is used.
#' @param box.upper function: determine upper border in upper box for numeric variables (default: `NULL`). If `NULL` then `max(.,na.rm=TRUE)` is used.
#' @param box.line function: determine line position in upper box for numeric variables (default: `NULL`). If `NULL` then `mean(.,na.rm=TRUE)` is used.
#' @param cex.main number: magnification to be used for the titles (default: `1`)
#' @param cex.legend number: magnification to be used for the legends (default: `1`)
#' @param width number: width of percentage axis (default: `1`). If `1` then the width is as wide as a plot.
#' @param height number: percentage of the height of the legends (default: `0.15`)
#' @return nothing
#' @references Tennekes, M., Jonge, E. de, Daas, P.J.H. (2013), Visualizing and Inspecting Large Datasets with Tableplots, Journal of Data Science 11 (1), 43-58.
#' @importFrom graphics lines
#' @export
#'
#' @examples
#' data("Boston", package="MASS")
#' tableplot(Boston, bin=sortbin(Boston))
#  tableplot(Boston, bin=sortbin(Boston, sortCol='chas'))
#  tableplot(Boston, bin=sortbin(Boston, sortCol=c('chas', 'rad"), equibin=FALSE)
tableplot <- function(x, select=NULL, subset = NULL, bin=NULL,  yj=NA, IQR_bias=5,
colpal       = grDevices::rainbow,
color.NA_num = "gray75",
color.NA     = "grey75",
color.num    = "lightblue",
color.box    = "deepskyblue",
color.line   = "black",
box.lower    = NULL,
box.upper    = NULL,
box.line     = NULL,
cex.main     = 1,
cex.legend   = 1,
width        = 1,
height       = 0.15) {
useLog <- function(x, IQR_bias) {
# tabplot::scaleNumCol
quant <- stats::quantile(x, na.rm=TRUE)
IQR   <- quant[4] - quant[2]
## simple test to determine whether scale is lin or log
(quant[5]>0 && quant[5] > quant[4] + IQR_bias * IQR) ||
(quant[1]<0 && quant[1] < quant[2] - IQR_bias * IQR)
}
#
stopifnot(is.data.frame(x))
# convert either to factor of numeric
df  <- x
for (i in 1:ncol(df)) {
if (!is.numeric(df[[i]]) && !is.factor(df[[i]])) {
df[[i]] <- factor(df[[i]])
}
}
# bin
if (is.null(bin)) bin <- sortbin(x, select)
stopifnot(is.integer(bin))
# subset and select
if (is.null(select)) select <- 1:ncol(df)
if (is.null(subset)) subset <- 1:nrow(df) else bin <- bin[subset]
df <- df[subset,select]
# adapt sortCol
opar <- par(mar=c(0, 0, 2.1,0))
# create basic plot
graphics::layout(matrix(1:(2*ncol(df)+2), nrow=2, byrow=TRUE), heights=c(1-height, height),
widths=c(width, rep(1, ncol(df))))
on.exit({
graphics::layout(1)
par(opar)
})
plot(c(0,0), c(1,0), axes=FALSE, type="l", xlim=c(-1,0), ylim=c(0,1), xlab="", ylab="")
for (i in seq(0,100,2)) lines(c(-0.03, 0), (1-i/100)*c(1,1))
i <- (0:10)/10
graphics::text(rep(0, length(i)), 1-i, labels=sprintf("%i%%", 100*i), pos=2)
# reorder by sortColumn
nbin <- table(sort(bin))
ubin <- proportions(nbin)
# do plots
yji <- rep_len(yj, ncol(df))
ranges <- list()
for (i in 1:ncol(df)) {
dfi <- df[[i]]
if (is.numeric(dfi)) {
l <- if (is.na(yj[i])) 1-as.numeric(useLog(dfi, IQR_bias)) else yj[i]
l <- round(2*l)/2
if (l!=1) {
dfi  <- yeo.johnson(dfi, l)
main <- sprintf("yj(%s,%s)", names(df)[i], as.character(l))
} else
main <- names(df)[i]
ranges[[i]]   <- range(dfi[is.finite(dfi)])
plot(ranges[[i]], c(0, 1), type="n", axes=FALSE, main=main, xlab="", ylab="", cex.main=cex.main)
by <- 1
for (j in seq_along(ubin)) {
dfij <- dfi[bin==as.integer(names(ubin)[j])]
ifin     <- is.finite(dfij)
dfij     <- dfij[ifin]
dy       <- ubin[j]
boxcolor <- if (any(!ifin)) color.NA_num else color.num
if (length(dfij)) {
bl <- if (is.null(box.lower)) min(dfij)  else box.lower(dfij)
bc <- if (is.null(box.line))  mean(dfij) else box.line(dfij)
bu <- if (is.null(box.upper)) max(dfij)  else box.upper(dfij)
if (bu>bl) {
graphics::polygon(c(ranges[[i]][1], bl, bl, ranges[[i]][1]), c(by, by, by-dy, by-dy), border=NA, col=boxcolor)
graphics::polygon(c(bl, bu, bu, bl), c(by, by, by-dy, by-dy), border=NA, col=color.box)
} else {
graphics::polygon(c(ranges[[i]][1], bl, bl, ranges[[i]][1]), c(by, by, by-dy, by-dy), border=NA, col=boxcolor)
lines(c(bl,bu), c(by, by-dy),  col=color.box)
}
lines(c(bc, bc), c(by, by-dy), col=color.line)
} else {
graphics::polygon(c(ranges[[i]][1], ranges[[i]][2], ranges[[i]][2], ranges[[i]][1]), c(by, by, by-dy, by-dy), border=NA, col=boxcolor)
}
by <- by-dy
}
} else {
plot(c(0, 1), c(0, 1), type="n", axes=FALSE, main=names(df)[i], xlab="", ylab="")
col <- c(colpal(length(levels(dfi))), color.NA)
tab <- proportions(table(bin, dfi, exclude = NULL),1)
by  <- 1
for (j in seq_along(ubin)) {
dy <- ubin[j]
crs <- cumsum(tab[j,])
for (k in seq_along(crs)) {
if (k==1)
graphics::polygon(c(0, crs[k], crs[k], 0), c(by, by, by-dy, by-dy), border=NA, col=col[1])
else
graphics::polygon(c(crs[k-1], crs[k], crs[k], crs[k-1]), c(by, by, by-dy, by-dy), border=NA, col=col[k])
}
by <- by-dy
}
nrnt <- length(colnames(tab))
if (nrnt<length(col)) col <- col[1:nrnt]
ranges[[i]] <- cbind(colnames(tab), col)
}
#box()
}
plot(c(0,1), c(1,0), axes=FALSE, type="n", xlab="", ylab="")
graphics::text(rep(0,4), seq(0.2, 0.8, by=.2),
c(sprintf("n: %i", nrow(df)), sprintf('min: %i', min(nbin)),
sprintf('max: %i', max(nbin)), sprintf("bins: %i", length(nbin))), pos=4)
for (i in 1:ncol(df)) {
if (is.numeric(ranges[[i]])){
par(mar=c(0,0,0,0))
plot(ranges[[i]], c(0,1), type="n", axes=FALSE)
at <- graphics::axTicks(1)
lines(range(at), c(1,1))
for (ati in at) lines(c(ati, ati), c(1, 0.95))
graphics::text(at, 0.95, at, pos=1, cex=cex.legend)
} else {
par(mar=c(0.1,0, 0, 0))
plot(c(0,1), c(0,1), type="n", axes=FALSE)
by <- 1
dy <- 1/nrow(ranges[[i]])
for (j in 1:nrow(ranges[[i]])) {
graphics::polygon(c(0, 0.1, 0.1, 0), c(by, by, by-dy, by-dy), border=NA, col=ranges[[i]][j,2])
graphics::text(0.2, by-dy/2, if(is.na(ranges[[i]][j,1])) "NA" else ranges[[i]][j,1], pos=4, cex=cex.legend)
by <- by-dy
}
}
}
}
niris <- sum(lengths(iris))
x <- iris
x[sample(niris, 0.4*niris)] <- NA
haed(x)
head(x)
x <- lapply(iris, function(v) { v[sample(length(v), 50)] <- NA})
x <- as.data.frame(x)
x <- lapply(iris, function(v) { v[sample(length(v), 50)] <- NA})
head(iris)
x <- lapply(iris, function(v) { v[sample(length(v), 50)] <- NA; v})
x <- as.data.frame(x)
head(x)
tableplot(x, bin=sortBin(x))
tableplot(x, bin=sortbin(x))
x <- Boston
x <- MASS::Boston
x
x <- lapply(x, function(v) { v[sample(length(v), 50)] <- NA; v})
x <- as.data.frame(x)
tableplot(x)
#' yeo.johnson
#'
#' Computes the Yeo-Johnson transformation, which is a normalizing transformation. The code and
#' documentation is taken from the \href{https://CRAN.R-project.org/package=VGAM}{VGAM} package
#' (see function \code{yeo.johnson}) with some slight modifications, e.g. \code{NA}'s are kept and
#' do not produce an error.
#'
#' @param y numeric: a vector or matrix.
#' @param lambda numeric: It is recycled to the same length as \code{y} if necessary.
#' @param derivative non-negative integer: the default is the ordinary function evaluation,
#' otherwise the derivative with respect to \code{lambda} (default: \code{0})
#' @param epsilon numeric and positive value: the tolerance given to values of \code{lambda} when comparing it to 0 or 2.
#' @param inverse logical: return the inverse transformation? (default: \code{FALSE})
#'
#' @details The Yeo-Johnson transformation can be thought of as an extension
#' of the Box-Cox transformation. It handles both positive and
#' negative values, whereas the Box-Cox transformation only handles
#' positive values. Both can be used to transform the data so
#' as to improve normality.
#' @references Yeo, I.-K. and Johnson, R. A. (2000). A new family of power transformations to improve normality or symmetry. \emph{Biometrika}, \bold{87}, 954--959.
#' @note If \code{inverse = TRUE} then the argument \code{derivative = 0} is required.
#' @seealso \code{VGAM::yeo.johnson}, \code{\link[MASS]{boxcox}}.
#' @return The Yeo-Johnson transformation or its inverse, or its derivatives with respect to
#' \code{lambda}, of \code{y}.
#' @export
#'
#' @examples
#' y <- seq(-4, 4, len = (nn <- 200))
#' ltry <- c(0, 0.5, 1, 1.5, 2)  # Try these values of lambda
#' lltry <- length(ltry)
#' psi <- matrix(as.numeric(NA), nn, lltry)
#' for (ii in 1:lltry)
#'   psi[, ii] <- yeo.johnson(y, lambda = ltry[ii])
#' matplot(y, psi, type = "l", ylim = c(-4, 4), lwd = 2, lty = 1:lltry,
#'         ylab = "Yeo-Johnson transformation", col = 1:lltry, las = 1,
#'         main = "Yeo-Johnson transformation with some values of lambda")
#' abline(v = 0, h = 0)
#' legend(x = 1, y = -0.5, lty = 1:lltry, legend = as.character(ltry),
#'        lwd = 2, col = 1:lltry)
yeo.johnson <- function(y, lambda, derivative = 0,
epsilon = sqrt(.Machine$double.eps),
inverse = FALSE) {
nay    <- is.na(y)
y[nay] <- 1
if (!all(is.numeric(derivative), length(derivative)==1, as.integer(derivative)==derivative, derivative>=0))
stop("argument 'derivative' must be a non-negative integer")
ans <- y
if (!all(is.numeric(epsilon), length(epsilon)==1, epsilon>0))
stop("argument 'epsilon' must be a single positive number")
L <- max(length(lambda), length(y))
if (length(y)      != L) y      <- rep_len(y,      L)
if (length(lambda) != L) lambda <- rep_len(lambda, L)
if (inverse) {
if (derivative != 0)
stop("argument 'derivative' must 0 when inverse = TRUE")
if (any(index <- y >= 0 & abs(lambda  ) >  epsilon))
ans[index] <- (y[index]*lambda[index] + 1)^(1/lambda[index]) - 1
if (any(index <- y >= 0 & abs(lambda  ) <= epsilon))
ans[index] <- expm1(y[index])
if (any(index <- y <  0 & abs(lambda-2) >  epsilon))
ans[index] <- 1 - (-(2-lambda[index]) *
y[index]+1)^(1/(2-lambda[index]))
if (any(index <- y <  0 & abs(lambda-2) <= epsilon))
ans[index] <- -expm1(-y[index])
return(ans)
}
if (derivative == 0) {
if (any(index <- y >= 0 & abs(lambda  ) >  epsilon))
ans[index] <- ((y[index]+1)^(lambda[index]) - 1) / lambda[index]
if (any(index <- y >= 0 & abs(lambda  ) <= epsilon))
ans[index] <- log1p(y[index])
if (any(index <- y <  0 & abs(lambda-2) >  epsilon))
ans[index] <- -((-y[index]+1)^(2-lambda[index]) - 1)/(2 -
lambda[index])
if (any(index <- y <  0 & abs(lambda-2) <= epsilon))
ans[index] <- -log1p(-y[index])
} else {
psi <- Recall(y = y, lambda = lambda, derivative = derivative - 1,
epsilon = epsilon, inverse = inverse)
if (any(index <- y >= 0 & abs(lambda  ) >  epsilon))
ans[index] <- ( (y[index]+1)^(lambda[index]) *
(log1p(y[index]))^(derivative) - derivative *
psi[index] ) / lambda[index]
if (any(index <- y >= 0 & abs(lambda  ) <= epsilon))
ans[index] <- (log1p(y[index]))^(derivative + 1) / (derivative + 1)
if (any(index <- y <  0 & abs(lambda-2) >  epsilon))
ans[index] <- -( (-y[index]+1)^(2-lambda[index]) *
(-log1p(-y[index]))^(derivative) - derivative *
psi[index] ) / (2-lambda[index])
if (any(index <- y <  0 & abs(lambda-2) <= epsilon))
ans[index] <- (-log1p(-y[index]))^(derivative + 1) / (derivative + 1)
}
ans[nay] <- NA
ans
}
tableplot(x)
x$chas <- factor(x$chas)
x$rad <- factor(x$rad)
tableplot(x)
renv::status()
renv::deactivate(clean = TRUE)
library("mmstat4")
packages()
files <- list.files(pattern = "*.R$", full.names = TRUE)
getwd()
files <- list.files(pattern = "*.R", full.names = TRUE)
files <- list.files(pattern = "*.R", full.names = TRUE, recursive = TRUE)
files <- list.files(pattern = "*\\.R$", full.names = TRUE, recursive = TRUE)
files
packages(files)
names(packages(files))
names(packages(files)$R)
sprintf('if(required("%s")) install.packages("%s")', R, R)
R<-names(packages(files)$R)
sprintf('if(required("%s")) install.packages("%s")', R, R)
cat(sprintf('if(required("%s")) install.packages("%s")\n', R, R))
files <- list.files(pattern = "*\\.py$", full.names = TRUE, recursive = TRUE)
R<-names(packages(files)$py)
r
R
